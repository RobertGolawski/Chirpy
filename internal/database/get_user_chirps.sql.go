// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: get_user_chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getUserChirps = `-- name: GetUserChirps :many
SELECT id, created_at, updated_at, body, user_id
FROM chirps
WHERE $1 = user_id
ORDER BY 
    CASE WHEN $2 = 'desc' THEN created_at END DESC,
    CASE WHEN $2 = 'asc' THEN created_at END ASC
`

type GetUserChirpsParams struct {
	UserID    uuid.NullUUID
	SortOrder interface{}
}

func (q *Queries) GetUserChirps(ctx context.Context, arg GetUserChirpsParams) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getUserChirps, arg.UserID, arg.SortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
